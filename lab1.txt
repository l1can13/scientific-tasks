% Задание 1

% Создание матрицы x1 размером 12x12 с случайными числами от 0 до 1
x1 = rand(12, 12);

% Выделение подматрицы x2 размером 5x5 из последних пяти элементов по строкам и столбцам
x2 = x1(end-4:end, end-4:end);

% Вывод x1 и x2 для проверки
disp("Матрица x1:");
disp(x1);
disp("Подматрица x2:");
disp(x2);

% Задание 2

% Создание матрицы x1, заполненной произвольными числами от 0 до 1.
% Для примера, давайте сделаем размер матрицы 6x6.
x1 = rand(6, 6);

% Создание матрицы x2, содержащей четные строки матрицы x1.
% В Octave индексация начинается с 1, поэтому четные строки будут 2, 4, ...
x2 = x1(2:2:end, :);

% Создание матрицы x3, содержащей нечетные столбцы матрицы x1.
x3 = x1(:, 1:2:end);

disp("Матрица x1:");
disp(x1);

disp("Матрица x2:");
disp(x2);

disp("Матрица x3:");
disp(x3);

% Задание 3

% Создание вектора-строки x1 с диапазоном значений от -1 до 1, разделенным на 100 элементов
x1 = linspace(-1, 1, 100);

disp("До зануления:");
disp(x1);

% Зануление элементов вектора x1, которые меньше 0.5
x1(x1 < 0.5) = 0;

% Вывод измененного вектора x1
disp("После зануления:");
disp(x1);

% Задание 4

% Создание квадратных матриц x1 и x2 размером 3x3, заполненных случайными числами от 0 до 1
x1 = rand(3, 3);
x2 = rand(3, 3);

% Перемножение матриц по правилам матричного умножения
resultMatrixMultiplication = x1 * x2;

% Поэлементное перемножение матриц
resultElementwiseMultiplication = x1 .* x2;

% Вывод результатов
disp("Результат матричного умножения:");
disp(resultMatrixMultiplication);
disp("Результат поэлементного умножения:");
disp(resultElementwiseMultiplication);

% Задание 5

% Определяем количество элементов
n = 5;

% Создаем вектор-строку x1 и вектор-столбец x2 с n элементами, заполненными случайными числами от 0 до 1
x1 = rand(1, n);
x2 = rand(n, 1);

% Перемножаем вектора по правилам матричного умножения
result_matrix_multiplication = x1 * x2;

% Для поэлементного умножения сначала преобразуем x2 в вектор-строку
x2_transposed = x2';

% Выполняем поэлементное умножение
result_elementwise_multiplication = x1 .* x2_transposed;

% Выводим результаты
disp('Результат матричного умножения:');
disp(result_matrix_multiplication);
disp('Результат поэлементного умножения:');
disp(result_elementwise_multiplication);

% Задание 6

% Определение размеров матриц
n = 5; % Пример размера
k = 4; % Пример размера
m = 3; % Пример размера

% Создание матриц x1 и x2 с произвольными числами от 0 до 1
x1 = rand(n, k);
x2 = rand(k, m);

% Перемножение матриц x1 и x2 с использованием стандартной функции
tic; % Начало измерения времени
x3 = x1 * x2;
toc; % Конец измерения времени и вывод результата

% Инициализация матрицы x3_elements для хранения результатов поэлементного умножения
x3_elements = zeros(n, m);

% Реализация алгоритма поэлементного нахождения элементов матрицы x3
tic; % Начало измерения времени
for i = 1:n
    for j = 1:m
        % Суммирование произведений соответствующих элементов
        for l = 1:k
            x3_elements(i, j) += x1(i, l) * x2(l, j);
        end
    end
end
toc; % Конец измерения времени и вывод результата

% Сравнение матриц x3 и x3_elements для проверки корректности поэлементного умножения
disp('Результат стандартного умножения:');
disp(x3);
disp('Результат поэлементного умножения:');
disp(x3_elements);

% Задание 7

% Создание вектора-строки x1, заполненного случайными числами от 0 до 1
n = 10; % Произвольный размер вектора
x1 = rand(1, n);

% Поэлементный подход
tic; % Начало измерения времени
x2_loop = zeros(1, n-1);
for i = 1:(n-1)
    x2_loop(i) = x1(i+1) - x1(i);
end
toc; % Конец измерения времени и вывод результата

% Векторизованный подход
tic; % Начало измерения времени
x2_vectorized = x1(2:end) - x1(1:end-1);
toc; % Конец измерения времени и вывод результата

% Вывод результатов
disp('x2 (цикл):');
disp(x2_loop);
disp('x2 (векторизация):');
disp(x2_vectorized);

% Задание 8

% Создаем матрицу x1 размером 5x5, заполненную случайными числами от 0 до 1
n = 5; % Размерность матрицы
x1 = rand(n, n);

% Создаем вторую матрицу x2, в которой будет храниться разность строк матрицы x1
x2 = diff(x1, 1, 1); % Разность между строками

% Создаем третью матрицу x3, в которой будет храниться разность столбцов матрицы x1
x3 = diff(x1, 1, 2); % Разность между столбцами

% Вывод результатов
disp("Матрица x1:");
disp(x1);
disp("Матрица x2 (разность строк x1):");
disp(x2);
disp("Матрица x3 (разность столбцов x1):");
disp(x3);

% Задание 9

% Создание вектора-строки x1, заполненного случайными числами от 0 до 1
n = 10; % Произвольный размер вектора
x1 = rand(1, n);

% Инициализация вектора x2 для хранения средних значений
x2 = zeros(1, n-2);

% Вычисление среднего значения от трех соседних элементов вектора x1
for i = 1:(n-2)
    x2(i) = sum(x1(i:i+2)) / 3;
end

% Вывод векторов x1 и x2
disp("Вектор x1:");
disp(x1);
disp("Вектор x2 (среднее от трех соседних элементов x1):");
disp(x2);

% Задание 10


% Задание 11


% Задание 12


% Задание 13


% Задание 14


% Задание 15


% Задание 16


% Задание 17


% Задание 18


% Задание 19